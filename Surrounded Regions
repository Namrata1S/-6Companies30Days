130. Surrounded Regions

class Solution {
    public void solve(char[][] board) {
        int n = board.length;
        int m = board[0].length;

        int  vis[][] = new int[n][m];
           // checking top down left right with boundaries
        for(int i=0;i<m;i++){
           if(board[0][i] == 'O' && vis[0][i] == 0){
            dfs(board,vis,0,i,n,m);
           }
        }
          for(int i=0;i<n;i++){
           if(board[i][0] == 'O' && vis[i][0] == 0){
            dfs(board,vis,i,0,n,m);
           }
        }
          for(int i=0;i<m;i++){
           if(board[n-1][i] == 'O' && vis[n-1][i] == 0){
            dfs(board,vis,n-1,i,n,m);
           }
        }
          for(int i=0;i<n;i++){
           if(board[i][m-1] == 'O' && vis[i][m-1] == 0){
            dfs(board,vis,i,m-1,n,m);
           }
        }
    
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == 'O' && vis[i][j] == 0){
                    board[i][j] = 'X';
                }
            }
        }
    }
    public void dfs(char[][] board,int [][]vis,int i,int j,int n,int m){
 
        vis[i][j] = 1;
        if(i+1 >= 0 && j >= 0 && i+1 < n && j < m && board[i+1][j] == 'O' && vis[i+1][j] == 0){
            dfs(board,vis,i+1,j,n,m);
        }
          if(i-1 >= 0 && j >= 0 && i-1 < n && j < m && board[i-1][j] == 'O' && vis[i-1][j] == 0){
            dfs(board,vis,i-1,j,n,m);
        }
          if(i >= 0 && j-1 >= 0 && i < n && j-1 < m && board[i][j-1] == 'O' && vis[i][j-1] == 0){
            dfs(board,vis,i,j-1,n,m);
        }
          if(i >= 0 && j+1 >= 0 && i < n && j+1 < m && board[i][j+1] == 'O' && vis[i][j+1] == 0){
            dfs(board,vis,i,j+1,n,m);
        }
     }
}
