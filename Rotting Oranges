class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        int vis[][] = new int[n][m];

        Queue<pair> q = new LinkedList<>();

        int freshcnt = 0;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.add(new pair(i,j,0));
                    vis[i][j] = 1;
                }else{
                    vis[i][j] = 0;
                }
                if(grid[i][j] == 1){
                    freshcnt++;
                }
            }
        }
        int tm = 0;
        int cnt = 0;
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        while(!q.isEmpty()){
            int r = q.peek().row;
            int c = q.peek().col;
            int t = q.peek().tm;
            tm = Math.max(t,tm);
            
            q.remove();

            for(int i=0;i<4;i++){
                int nr = r+drow[i];
                int nc = c+dcol[i];

                if(nr >= 0 && nr < n && nc >= 0 && nc < m && grid[nr][nc] == 1 && vis[nr][nc] == 0){
                    q.add(new pair(nr,nc,t+1));
                    vis[nr][nc] = 2;
                    cnt++;
                }
            }

        }
        if(cnt != freshcnt) return -1;
        return tm;
    }
}
class pair{
    int row;
    int col;
    int tm;
      pair(int row,int col,int tm){
        this.row = row;
        this.col = col;
        this.tm = tm;
     }
}
