// Topological sort using dfs
class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
         List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : prerequisites) {
            int a = edge[0];
            int b = edge[1];
            adj.get(b).add(a); // edge from b to a
        }

        int vis[] = new int[numCourses];
        int pathvis[] = new int[numCourses];
       Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0) {
                if(dfs(i, vis, st, adj,pathvis)){
                    return new int[0];
                }
            }
        }

        int ans[] = new int[numCourses];
        int i = 0;
        while (!st.isEmpty()) {
            ans[i++] = st.peek();
            st.pop();
        }
        return ans;
      }
      public static boolean dfs(int node, int vis[], Stack<Integer> st,
            List<List<Integer>> adj,int pathvis[]) {
        vis[node] = 1;
        pathvis[node] = 1;
        for (int it : adj.get(node)) {
            if (vis[it] == 0){
                if(dfs(it, vis, st, adj,pathvis)) return true;
            }else if(pathvis[it] == 1)return true;
        }
        st.push(node);
        pathvis[node] = 0;
        return false;
    }

  
}
